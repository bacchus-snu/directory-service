import { Client } from './utils';

/**
 * Attributes which are determined by application logic.
 */
interface User {
  name: string;
  passwordDigest?: Buffer;
  blocked: boolean;
  blockedExpireAfter?: Date;
  realname?: string;
  snuidBachelor?: string;
  snuidMaster?: string;
  snuidDoctor?: string;
  resetExpireAfter?: Date;
  shellId?: number;
  primaryEmailAddressId?: number;
}

/**
 * Users, with attributes which are generated by database and model logic.
 */
interface StoredUser extends User {
  userId: number;
  resetToken?: string;
  uid?: number;
}

/**
 * Additional information from other tables than 'users',
 * and operations on StoredUser.
 */
class UserModel implements StoredUser {
}

/**
 * Insert User into DB
 */
export function insert(client: Client, user: User): Promise<void> {
  return null;
}

export function byUserId(client: Client, userId: number): Promise<UserModel> {
  return null;
}

export function byName(client: Client, name: string): Promise<UserModel> {
  return null;
}

export function byUid(client: Client, uid: number): Promise<UserModel> {
  return null;
}

/**
 * List of users, ordered by user_id
 * Search condition:
 *   - null: ignored
 *   - string x: LIKE %x%
 *   - number, boolean: equality
 */
export function list(client: Client, length?: number, after?: number, condition?: StoredUser):
  Promise<Array<UserModel>> {
  return null;
}

export function num(client: Client, condition?: StoredUser): Promise<number> {
  return null;
}
